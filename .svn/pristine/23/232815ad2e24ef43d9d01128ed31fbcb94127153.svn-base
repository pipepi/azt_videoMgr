package com.aepan.sysmgr.web.controller;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com._21cn.framework.util.PageList;
import com._21cn.framework.web.HttpRequestInfo;
import com.aepan.sysmgr.azure.AzureMediaSDKException;
import com.aepan.sysmgr.azure.UploadFileRps;
import com.aepan.sysmgr.model.StoreVideo;
import com.aepan.sysmgr.model.User;
import com.aepan.sysmgr.model.Video;
import com.aepan.sysmgr.model.VideoCheck;
import com.aepan.sysmgr.model.config.FileConfig;
import com.aepan.sysmgr.model.packageinfo.PackageInfo;
import com.aepan.sysmgr.model.packageinfo.PackageStat;
import com.aepan.sysmgr.model.tempinfo.LinkVideoInfo;
import com.aepan.sysmgr.service.ConfigService;
import com.aepan.sysmgr.service.PackageService;
import com.aepan.sysmgr.service.PackageStatService;
import com.aepan.sysmgr.service.StoreService;
import com.aepan.sysmgr.service.UserService;
import com.aepan.sysmgr.service.VideoService;
import com.aepan.sysmgr.util.AjaxResponseUtil;
import com.aepan.sysmgr.util.ConfigManager;
import com.aepan.sysmgr.util.Constants;
import com.aepan.sysmgr.util.DataTableReturnObject;
import com.aepan.sysmgr.util.FileUploadStatus;
import com.aepan.sysmgr.util.FileUtil;
import com.aepan.sysmgr.util.FileUtilAzure;
import com.alibaba.fastjson.JSONObject;

/**
 * 视频相关接口
 * @author lanker
 * 2015年7月31日下午4:09:52
 */
@Controller
public class VideoController extends DataTableController {
	private static final Logger logger = LoggerFactory.getLogger(VideoController.class);
	
	@Autowired
	private VideoService videoService;
	@Autowired
	private ConfigService configService;
	@Autowired
	private UserService userService;
	@Autowired
	private PackageService packageService;
	@Autowired 
	private PackageStatService packageStatService;
	@Autowired
	private StoreService storeService;

	//----------------------------视频审核 start---------------------------------------
	@RequestMapping("/video/searchhm")
	public String checkSearch(HttpServletRequest request,HttpServletResponse res,ModelMap model) throws AzureMediaSDKException{
		if(!isAdminLogin(request)){
			return "redirect:/login";
		}
		HttpRequestInfo reqInfo = new HttpRequestInfo(request);
		String sellerName = reqInfo.getParameter("seller_name","");
		String checkState = reqInfo.getParameter("check_state");
		String pageNo = reqInfo.getParameter("pageNo");
		String pageSize = reqInfo.getParameter("pageSize");
		int pn = pageNo==null?1:Integer.parseInt(pageNo);
		int ps = pageSize==null?4:Integer.parseInt(pageSize);
		int checkstate = checkState==null?0:Integer.parseInt(checkState);
		PageList<Video> list = new PageList<Video>();
		if(checkstate>0){
			model.addAttribute("checkState",checkstate);
		}
		model.addAttribute("sortName", "update_time");
		model.addAttribute("sortOrder", "desc");
		if(sellerName==null||sellerName.trim().length()==0){
			//查询最新编辑过的视频列表
			//model.addAttribute("user", ((User)(request.getSession().getAttribute(Constants.SESSION_USER))).getId());
			list = videoService.getListWithPatnerAccountName(model, pn, ps);
		}else{
			//接口：输入（商家名称）输出（videoMgr系统中对应的user_id）
			
			int[] userIds = userService.getUserIdsByPartnerAccountName(sellerName);
			if(userIds!=null&&userIds.length>0){
				String uIdStr = "";
				for (int i : userIds) {
					uIdStr += i+",";
				}
				uIdStr = uIdStr.substring(0,uIdStr.length()-1);
				model.addAttribute("userIds", uIdStr);
				list = videoService.getListWithPatnerAccountName(model, pn, ps);
			}
		}
		model.clear();
		model.addAttribute("list", list);
		model.addAttribute("turn", list.getPageTurn());
		FileConfig config = ConfigManager.getInstance().getFileConfig(configService);
		model.addAttribute("imgpre", config.IMG_AZURE_PRE);
		return "/video/ui/checksub";
	}
	@RequestMapping("/video/checkpage")
	public String checkPage(HttpServletRequest request,HttpServletResponse response,ModelMap model){
		if(!isAdminLogin(request)){
			return "redirect:/login";
		}
		HttpRequestInfo reqInfo = new HttpRequestInfo(request);
		String checkState = reqInfo.getParameter("check_state");
		if(checkState!=null&&!checkState.trim().isEmpty()){
			model.addAttribute("check_state", checkState);
		}
		//校验是否为管理者
		return "/video/ui/check";
	}
	@RequestMapping("/video/check")
	public String check(HttpServletRequest request, HttpServletResponse response, ModelMap model) throws AzureMediaSDKException{
		if(!isAdminLogin(request)){
			return "redirect:/login";
		}
		HttpRequestInfo reqInfo = new HttpRequestInfo(request);
		int videoId = reqInfo.getIntParameter("id");
		int checkState = reqInfo.getIntParameter("state");
		String checkMsg = reqInfo.getParameter("msg","");
		videoService.check(videoId, checkState, checkMsg);
		model.addAttribute("success", true);
		AjaxResponseUtil.returnData(response, JSONObject.toJSONString(model));
		return null;
	}
	@RequestMapping("/video/offLineMulti")
	public String offLineMulti(HttpServletRequest request,HttpServletResponse response,ModelMap model) throws AzureMediaSDKException{
		if(!isAdminLogin(request)){
			return "redirect:/login";
		}
		HttpRequestInfo reqInfo = new HttpRequestInfo(request);
		String ids = reqInfo.getParameter("ids");
		String checkMsg = reqInfo.getParameter("msg");
		if(ids!=null&&ids.trim().length()>0&&
		   checkMsg!=null&&checkMsg.trim().length()>0
			){
			String[] videoIdArr = ids.split(",");
			for (String vid : videoIdArr) {
				int vidInt = Integer.parseInt(vid);
				videoService.check(vidInt, VideoCheck.state_下线, checkMsg);
			}
			model.addAttribute("success", true);
			AjaxResponseUtil.returnData(response, JSONObject.toJSONString(model));
		}
		return null;
	}
	@RequestMapping("/video/updatecheckhm")
	public String updatePageCheckHM(HttpServletRequest request,HttpServletResponse response,ModelMap model) throws AzureMediaSDKException{
		if(!isAdminLogin(request)){
			return "redirect:/login";
		}
		HttpRequestInfo reqInfo = new HttpRequestInfo(request);
		String id = reqInfo.getParameter("video_id");
		if(id!=null&&!id.trim().isEmpty()){
			Video v = videoService.get(Integer.parseInt(id));
			v.escapeHtml();
			model.addAttribute("video",v);
		}
		FileConfig config = ConfigManager.getInstance().getFileConfig(configService);
		model.addAttribute("imgpre", config.IMG_AZURE_PRE);
		return "/video/ui/checkedit";
	}
	//----------------------------视频审核 end---------------------------------------
	//----------------------------接入到haimall中的UI界面 start----------------------------
	@RequestMapping("/video/linkPlayer")
	@Transactional(rollbackFor=Exception.class)
	public String linkPlayer(HttpServletRequest request, HttpServletResponse response, ModelMap model) throws AzureMediaSDKException{
		if(!isLogin(request)){
			//initConfig("", request);
			return "redirect:/login";
		}
		HttpRequestInfo reqInfo = new HttpRequestInfo(request);
        Integer storeId = reqInfo.getIntParameter("storeId", -1);
        if(storeId > 0 ){
        	User user = (User)request.getSession().getAttribute(Constants.SESSION_USER);
        	String videoIds = reqInfo.getParameter("videoIds", "");
        	if(videoIds.trim().length()>0){
        		String[] vidArr = videoIds.split(",");
        		List<StoreVideo> batchList = new ArrayList<StoreVideo>();
        		for (String vid : vidArr) {
					StoreVideo sv = new StoreVideo(user.getId(),storeId,Integer.parseInt(vid));
					batchList.add(sv);
				}
        		LinkVideoInfo lvi = videoService.canLink(user.getId(),user.getPackageId(), storeId, batchList);
        		if(lvi.can){
        			videoService.deleteByUserIdANDStoreId(user.getId(), storeId);
        			videoService.batchInsert(batchList.size(), batchList, user.getId());
        			//更新套餐,已使用视频数量
        			PackageStat pstate = packageStatService.getByUserId(user.getId());
        			pstate.setVideoNum(lvi.linkedVideoNum);
        			packageStatService.update(pstate);
        		}else{
        			model.addAttribute("success", false);
        			
        			model.addAttribute("oc", lvi.onceStoreCanLinkVideoNum);
        			model.addAttribute("ol", lvi.onceStoreVideoNum);
        			
        			model.addAttribute("c", lvi.canlinkVideoNum);
        			model.addAttribute("l", lvi.linkedVideoNum);
                	AjaxResponseUtil.returnData(response, JSONObject.toJSONString(model));
                	return null;
        		}
        		 
        	}else if(videoIds.trim().length()==0){
        		videoService.deleteByUserIdANDStoreId(user.getId(), storeId);
        	}
        	storeService.addLucene(configService,storeId);
        	model.addAttribute("success", true);
        	AjaxResponseUtil.returnData(response, JSONObject.toJSONString(model));
        	return null;
        }
        model.addAttribute("success", false);
        AjaxResponseUtil.returnData(response, JSONObject.toJSONString(model));
		return null;
	}
	/**
	 * 播放器页面关联视频
	 */
	@RequestMapping("video/listhm4player")
	public String listVideoDataHM4Player(HttpServletRequest request, HttpServletResponse response, ModelMap model) throws AzureMediaSDKException{
		HttpRequestInfo reqInfo = new HttpRequestInfo(request);
		String pageNo = reqInfo.getParameter("pageNo");
		String pageSize = reqInfo.getParameter("pageSize");
		int pn = pageNo==null?1:Integer.parseInt(pageNo);
		int ps = pageSize==null?50:Integer.parseInt(pageSize);
		if(!isLogin(request)){
			//initConfig(userName, request);
			return "redirect:/login";
		}
		model.addAttribute("user", ((User)(request.getSession().getAttribute(Constants.SESSION_USER))).getId());
		model.addAttribute("checkState",VideoCheck.state_上线);
		model.addAttribute("sortName", "update_time");
		model.addAttribute("sortOrder", "desc");
		PageList<Video> list = videoService.getList(model, pn, ps);
		model.clear();
		model.addAttribute("list", list);
		model.addAttribute("turn", list.getPageTurn());
		FileConfig config = ConfigManager.getInstance().getFileConfig(configService);
		model.addAttribute("imgpre", config.IMG_AZURE_PRE);
		return "/store/videolistsub";
	}
	@RequestMapping("video/addhm")
	public String addVideoPageHM(HttpServletRequest request, HttpServletResponse response, ModelMap model) throws AzureMediaSDKException{
		if(!isLogin(request)){
			return "redirect:/login";
		}
		//套餐拥有视频数量校验
		User user = (User)request.getSession().getAttribute(Constants.SESSION_USER);
		PackageInfo packageInfo =  packageService.getById(user.getPackageId());
		int canHaveVideoNum = packageInfo==null?0:packageInfo.getVideoNum()*packageInfo.getPlayerNum();
		int hadVideoNum =videoService.getStoreVideoCountByUserId(user.getId());
		if(hadVideoNum>=canHaveVideoNum){
			String error_msg = "套餐视频数量已满["+hadVideoNum+"/"+canHaveVideoNum+"]";
			logger.warn("--error_msg:"+error_msg);
			model.addAttribute("error_msg",error_msg);
		}
		return "/video/ui/edit";
	}
	@RequestMapping("video/listhm")
	public String listVideoPageHM(HttpServletRequest request, HttpServletResponse response, ModelMap model) throws AzureMediaSDKException{
		if(!isLogin(request)){
			return "redirect:/login";
		}
		return "/video/ui/list";
	}
	@RequestMapping("video/listhmAjax")
	public String listVideoAjaxHM(HttpServletRequest request, HttpServletResponse response, ModelMap model) throws AzureMediaSDKException{
		HttpRequestInfo reqInfo = new HttpRequestInfo(request);
		String pageNo = reqInfo.getParameter("pageNo");
		String pageSize = reqInfo.getParameter("pageSize");
		int pn = pageNo==null?1:Integer.parseInt(pageNo);
		int ps = pageSize==null?4:Integer.parseInt(pageSize);
		if(!isLogin(request)){
			//initConfig(userName, request);
			return "redirect:/login";
		}
		model.addAttribute("user", ((User)(request.getSession().getAttribute(Constants.SESSION_USER))).getId());
		model.addAttribute("sortName", "update_time");
		model.addAttribute("sortOrder", "desc");
		PageList<Video> list = videoService.getList(model, pn, ps);
		model.clear();
		model.addAttribute("list", list);
		model.addAttribute("turn", list.getPageTurn());
		AjaxResponseUtil.returnData(response, JSONObject.toJSONString(model));
		return null;
	}
	@RequestMapping("video/listhmdata")
	public String listVideoDataHM(HttpServletRequest request, HttpServletResponse response, ModelMap model) throws AzureMediaSDKException{
		HttpRequestInfo reqInfo = new HttpRequestInfo(request);
		String pageNo = reqInfo.getParameter("pageNo");
		String pageSize = reqInfo.getParameter("pageSize");
		int pn = pageNo==null?1:Integer.parseInt(pageNo);
		int ps = pageSize==null?4:Integer.parseInt(pageSize);
		if(!isLogin(request)){
			return "redirect:/login";
		}
		model.addAttribute("user", ((User)(request.getSession().getAttribute(Constants.SESSION_USER))).getId());
		model.addAttribute("sortName", "update_time");
		model.addAttribute("sortOrder", "desc");
		PageList<Video> list = videoService.getList(model, pn, ps);
		model.clear();
		model.addAttribute("list", list);
		model.addAttribute("turn", list.getPageTurn());
		FileConfig config = ConfigManager.getInstance().getFileConfig(configService);
		model.addAttribute("imgpre", config.IMG_AZURE_PRE);
		return "/video/ui/listsub";
	}
	@RequestMapping("/video/deletehm")
	@Transactional(rollbackFor=Exception.class)
	public String deleteHM(HttpServletRequest req,HttpServletResponse res,ModelMap model){
		if(!isLogin(req)){
			return "redirect:/login";
		}
		HttpRequestInfo reqInfo = new HttpRequestInfo(req);
		String id = reqInfo.getParameter("video_id");
		User user = (User)req.getSession().getAttribute(Constants.SESSION_USER);
		if(id!=null&&!id.trim().isEmpty()){
			videoService.delete(Integer.parseInt(id),user.getId());
		}
		return "redirect:/video/listhm";
	}
	@RequestMapping("/video/deletehmAjax")
	@Transactional(rollbackFor=Exception.class)
	public String deleteHMAjax(HttpServletRequest req,HttpServletResponse res,ModelMap model){
		if(!isLogin(req)||!isAdminLogin(req)){
			return "redirect:/login";
		}
		User user = (User)req.getSession().getAttribute(Constants.SESSION_USER);
		HttpRequestInfo reqInfo = new HttpRequestInfo(req);
		String id = reqInfo.getParameter("video_id");
		if(id!=null&&!id.trim().isEmpty()){
			videoService.delete(Integer.parseInt(id),user.getId());
		}
		model.addAttribute("success", true);
		AjaxResponseUtil.returnData(res, JSONObject.toJSONString(model));
		return null;
	}
	@RequestMapping("/video/updatehm")
	public String updatePageHM(HttpServletRequest req,HttpServletResponse res,ModelMap model) throws AzureMediaSDKException{
		if(!isLogin(req)){
			return "redirect:/login";
		}
		HttpRequestInfo reqInfo = new HttpRequestInfo(req);
		String id = reqInfo.getParameter("video_id");
		if(id!=null&&!id.trim().isEmpty()){
			Video v = videoService.get(Integer.parseInt(id));
			v.escapeHtml();
			model.addAttribute("video",v);
		}
		FileConfig config = ConfigManager.getInstance().getFileConfig(configService);
		model.addAttribute("imgpre", config.IMG_AZURE_PRE);
		return "/video/ui/edit";
	}
	
	
	//----------------------------接入到haimall中的UI界面 end----------------------------
	/**
	 * 搜索视频
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequestMapping("/video/search")
	public String search(HttpServletRequest request, HttpServletResponse response, ModelMap model){
		String [] idKey = new String[]{"id", "active"};
    	logger.info("method: video search");
		setPageSortModel(request, model, idKey);
    	PageList<Video> list = videoService.getList(model, Integer.parseInt(model.get("pageNo").toString()), 
    			                             Integer.parseInt(model.get("pageSize").toString()));
    	DataTableReturnObject data = new DataTableReturnObject();
    	data.setResult(list, model.get("sEcho").toString());
    	AjaxResponseUtil.returnData(response, JSONObject.toJSONString(data));
		return null;
	}
	
	@RequestMapping("/video/mgr")
	public String userIndex(HttpServletRequest request,
			HttpServletResponse response, ModelMap model){
		 PageList<Video> list = videoService.getList(model, 1, 10);
		 model.addAttribute("list", list);
		return "/video/list";
	}
	@RequestMapping("/video/create")
	public String create(HttpServletRequest req,HttpServletResponse res,ModelMap model){
		return "/video/form";
	}
	@RequestMapping("/video/delete")
	@Transactional(rollbackFor=Exception.class)
	public String delete(HttpServletRequest req,HttpServletResponse res,ModelMap model){
		if(!isLogin(req)&&isAdminLogin(req)){
			return "redirect:/login";
		}
		HttpRequestInfo reqInfo = new HttpRequestInfo(req);
		String id = reqInfo.getParameter("video_id");
		User user = (User)req.getSession().getAttribute(Constants.SESSION_USER);
		if(id!=null&&!id.trim().isEmpty()){
			videoService.delete(Integer.parseInt(id),user.getId());
		}
		PageList<Video> list = videoService.getList(model, 1, 10);
		 model.addAttribute("list", list);
		return "/video/list";
	}
	@RequestMapping("/video/update_page")
	public String updatePage(HttpServletRequest req,HttpServletResponse res,ModelMap model){
		if(!isLogin(req)){
			return "redirect:/login";
		}
		HttpRequestInfo reqInfo = new HttpRequestInfo(req);
		String id = reqInfo.getParameter("video_id");
		if(id!=null&&!id.trim().isEmpty()){
			Video v = videoService.get(Integer.parseInt(id));
			model.addAttribute("video",v);
		}
		return "/video/form";
	}
	@RequestMapping("/video/save")
	public String save(HttpServletRequest req,HttpServletResponse res,ModelMap model) throws Exception{
		if(!isLogin(req)){
			return "redirect:/login";
		}
		//套餐拥有视频数量校验
		User user = (User)req.getSession().getAttribute(Constants.SESSION_USER);
		int userId = user.getId();
		PackageInfo packageInfo =  packageService.getById(user.getPackageId());
		int hadVideoNum = videoService.getVideoCountByUserId(userId);
		
		int canHaveVideoNum = packageInfo==null?0:packageInfo.getVideoNum()*packageInfo.getPlayerNum();
		if(hadVideoNum>=canHaveVideoNum){
			model.addAttribute("error_msg", "套餐视频数量已满["+hadVideoNum+"/"+canHaveVideoNum+"]");
			AjaxResponseUtil.returnData(res, JSONObject.toJSONString(model));
			return null;
		}		
		HttpRequestInfo reqInfo = new HttpRequestInfo(req);
		String srcImgId = reqInfo.getParameter("src_img_id");
		String cutImgId = reqInfo.getParameter("cut_img_id");
		/*String videoId = reqInfo.getParameter("video_id");
		String h5VideoId = reqInfo.getParameter("h5_video_id");*/
		UploadFileRps uploadFileRps = (UploadFileRps)req.getSession().getAttribute(Constants.SESSION_UPLOAD_VIDEO_RPS);
		String uploadAssetId = reqInfo.getParameter("upload_asset_id");
		String encodeAssetId = reqInfo.getParameter("encode_asset_id");
		String activeStr = reqInfo.getParameter("active","");
		int active = activeStr.trim().length()>0?Integer.parseInt(activeStr):1;
		String desc = reqInfo.getParameter("desc");
		String title = reqInfo.getParameter("title");
		
		//根据裁剪图和大小图尺寸，生成两张图；删除源图和裁剪图
		FileConfig fileConfig = ConfigManager.getInstance().getFileConfig(configService);
		String cutImgIdUrl = fileConfig.IMG_LOCAL_DIR+"img/"+cutImgId;
		File f = new File(cutImgIdUrl);
		BufferedImage srcImage = ImageIO.read(f);
		String imageType = FileUtil.getImageType(f);
		byte[] maxImgContent =  FileUtil.scaleImage(srcImage, fileConfig.MAX_IMG_WIDTH, imageType,fileConfig);
		byte[] minImgContent =  FileUtil.scaleImage(srcImage, fileConfig.MIN_IMG_WIDTH, imageType,fileConfig);
		String maxImg = "max_"+srcImgId;
		String minImg = "min_"+srcImgId;
		//保存本地替换成保存微软云
		//FileUtil.bytes2File(maxImgContent, maxImg);
		//FileUtil.bytes2File(minImgContent, minImg);
		UploadFileRps maxrs =  FileUtilAzure.uploadImg(maxImgContent, maxImg,fileConfig);
		UploadFileRps minrs = FileUtilAzure.uploadImg(minImgContent, minImg,fileConfig);
		
		FileUtil.remove(fileConfig.IMG_LOCAL_DIR+"img/"+srcImgId);
		FileUtil.remove(fileConfig.IMG_LOCAL_DIR+"img/"+cutImgId);
		
		Video v = new Video();  
		UUID uuid = UUID.randomUUID();
		v.userId = userId;
		v.guid=uuid.toString();
		v.name=title;
		v.desc=desc;
		v.active= active==1?true:false;
		v.video = uploadFileRps.getVedioUrl();
		v.h5Video=uploadFileRps.getH5VedioUrl();
		v.videoSize=uploadFileRps.getVedioFileSize()/1024f/1024;
		v.h5VideoSize=uploadFileRps.getH5VedioFileSize()/1024f/1024;
		v.uploadAssetId = uploadAssetId;
		v.encodeAssetId = encodeAssetId;
		if(maxrs.success){v.imgMax = maxrs.imgUrl;}
		if(minrs.success){v.imgMin = minrs.imgUrl;}
		int id = videoService.insert(v);
		model.addAttribute("id", id);
		model.clear();
		AjaxResponseUtil.returnData(res, JSONObject.toJSONString(model));
		return null;
	}
	@RequestMapping("/video/update")
	public String update(HttpServletRequest req,HttpServletResponse res,ModelMap model) throws Exception{
		if(!isAdminLogin(req)&&!isLogin(req)){
			return "redirect:/login";
		}
		HttpRequestInfo reqInfo = new HttpRequestInfo(req);
		String id = reqInfo.getParameter("id");
		String srcImgId = reqInfo.getParameter("src_img_id");
		String cutImgId = reqInfo.getParameter("cut_img_id");
		//String videoId = reqInfo.getParameter("video_id");
		//String h5VideoId = reqInfo.getParameter("h5_video_id");
		UploadFileRps uploadFileRps = (UploadFileRps)req.getSession().getAttribute(Constants.SESSION_UPLOAD_VIDEO_RPS);
		String uploadAssetId = reqInfo.getParameter("upload_asset_id");
		String encodeAssetId = reqInfo.getParameter("encode_asset_id");
		String activeStr = reqInfo.getParameter("active","");
		int active = activeStr.trim().length()>0?Integer.parseInt(activeStr):1;
		String desc = reqInfo.getParameter("desc");
		String title = reqInfo.getParameter("title");
		
		if(id!=null&&!id.trim().isEmpty()){
			Video v = videoService.get(Integer.parseInt(id));
			if(v!=null){
				boolean update = false;
				boolean activeBool = active==1?true:false; 
				if(activeBool!=v.active){
					v.active = activeBool;
					update = true;
				}
				if(title!=null&&!title.equals(v.name)){
					v.name=title;
					update = true;
				}
				if(desc!=null&&!desc.equals(v.desc)){
					v.desc=desc;
					update = true;
				}
				if(uploadAssetId!=null&&!uploadAssetId.endsWith(v.uploadAssetId)){
					v.video = uploadFileRps.getVedioUrl();
					v.h5Video=uploadFileRps.getH5VedioUrl();
					v.videoSize=uploadFileRps.getVedioFileSize()/1024f/1024;
					v.h5VideoSize=uploadFileRps.getH5VedioFileSize()/1024f/1024;
					v.uploadAssetId = uploadAssetId;
					v.encodeAssetId = encodeAssetId;
					update = true;
				}
				
				if(cutImgId!=null&&srcImgId!=null){
					FileConfig fileConfig = ConfigManager.getInstance().getFileConfig(configService);
					///根据裁剪图和大小图尺寸，生成两张图；删除源图和裁剪图;删除旧的两张尺寸图
					String cutImgIdUrl = fileConfig.IMG_LOCAL_DIR+"img/"+cutImgId;
					File f = new File(cutImgIdUrl);
					BufferedImage srcImage = ImageIO.read(f);
					String imageType = FileUtil.getImageType(f);
					byte[] maxImgContent =  FileUtil.scaleImage(srcImage, fileConfig.MAX_IMG_WIDTH, imageType,fileConfig);
					byte[] minImgContent =  FileUtil.scaleImage(srcImage, fileConfig.MIN_IMG_WIDTH, imageType,fileConfig);
					String maxImg = "max_"+srcImgId;
					String minImg = "min_"+srcImgId;
					UploadFileRps maxrs =  FileUtilAzure.uploadImg(maxImgContent, maxImg,fileConfig);
					UploadFileRps minrs = FileUtilAzure.uploadImg(minImgContent, minImg,fileConfig);
					FileUtil.remove(fileConfig.IMG_LOCAL_DIR+"img/"+srcImgId);
					FileUtil.remove(fileConfig.IMG_LOCAL_DIR+"img/"+cutImgId);
					FileUtilAzure.delImg(ConfigManager.getInstance().getFileConfig(configService), v.imgMax);
					FileUtilAzure.delImg(ConfigManager.getInstance().getFileConfig(configService), v.imgMin);
					if(maxrs.success){v.imgMax = maxrs.imgUrl;}
					if(minrs.success){v.imgMin = minrs.imgUrl;}
					update = true;
				}
				if(update){
					v.checkState = VideoCheck.state_待审核;
					videoService.update(v);
				}
			}
		}
		model.clear();
		AjaxResponseUtil.returnData(res, JSONObject.toJSONString(model));
		return null;
	}
	@RequestMapping("/video/update_ajax")
	public String updateAjax(HttpServletRequest req,HttpServletResponse res,ModelMap model){
		if(!isLogin(req)&&!isAdminLogin(req)){
			return "redirect:/login";
		}
		HttpRequestInfo reqInfo = new HttpRequestInfo(req);
		String id = reqInfo.getParameter("video_id");
		String active = reqInfo.getParameter("active");
		if(id!=null&&!id.trim().isEmpty()){
			Video v = videoService.get(Integer.parseInt(id));
			if(v!=null){
				boolean update = false;
				if(active!=null&&!active.trim().isEmpty()){
					v.active=active.equals("true")?true:false;
					update = true;
				}
				if(update){
					videoService.update(v);
					model.addAttribute("success", true);
					AjaxResponseUtil.returnData(res, JSONObject.toJSONString(model));
					return null;
				}
			}
		}
		model.addAttribute("success", false);
		AjaxResponseUtil.returnData(res, JSONObject.toJSONString(model));
		return null;
	}
	/**
	 * 上传视频
	 */
	@RequestMapping("/video/upvid")
	public String uploadVideo(HttpServletRequest req,HttpServletResponse res,ModelMap model){
		//s1:验证登录
		if(!isLogin(req)&&isAdminLogin(req)){
			return "redirect:/login";
		}
		FileConfig fileConfig = ConfigManager.getInstance().getFileConfig(configService);	
		UploadFileRps rs = FileUtilAzure.uploadVideo(req,fileConfig);
		if(rs!=null&&rs.success){
			//model.addAttribute("url", rs.getVedioUrl());
			//model.addAttribute("h5Url", rs.getH5VedioUrl());
			req.getSession().setAttribute(Constants.SESSION_UPLOAD_VIDEO_RPS, rs);
			model.addAttribute("name", rs.videoName);
			model.addAttribute("uploadAssetId", rs.getUploadAssetId());
			model.addAttribute("encodeAssetId", rs.getEncodeAssetId());
			model.addAttribute("success", true);
		}else{
			model.addAttribute("success", false);
			model.addAttribute("errMsg", "上传视频不能大于200M");
		}
    	AjaxResponseUtil.returnData(res, JSONObject.toJSONString(model));
		return null;
	}
	@RequestMapping("/video/progress")
	public String uploadVideoProgress(HttpServletRequest req,HttpServletResponse res,ModelMap model){
		//s1:验证登录
		if(!isLogin(req)){
			return "redirect:/login";
		}
		FileUploadStatus status = (FileUploadStatus) req.getSession().getAttribute("status");
		long diff = status.getPContentLength()/100;
		if(status.getPBytesRead()+diff<status.getPContentLength()){
			status.setPBytesRead(status.getPBytesRead()+diff);
			req.getSession().setAttribute("status", status);
		}
    	AjaxResponseUtil.returnData(res, JSONObject.toJSONString(status));
		return null;
	}
	/**
	 * 上传被裁剪源图
	 */
	@RequestMapping("/video/upimgcover")
	public String uploadImgCover(HttpServletRequest req,HttpServletResponse res,ModelMap model){
		//if(!!isLogin(req)){
		//	return "redirect:/login";
		//}
		//清楚上一次上传和裁剪的图片
		HttpRequestInfo reqInfo = new HttpRequestInfo(req);
		String oldSrcImgId = reqInfo.getParameter("oldSrcImgId");
		String oldCutImgId = reqInfo.getParameter("oldCutImgId");
		FileConfig fileConfig = ConfigManager.getInstance().getFileConfig(configService);
		FileUtil.remove(fileConfig.IMG_LOCAL_DIR+"img/"+oldSrcImgId);
		FileUtil.remove(fileConfig.IMG_LOCAL_DIR+"img/"+oldCutImgId);
		try {
			File f = FileUtil.initImg(req,fileConfig);
            BufferedImage bi = ImageIO.read(f);
            int srcWidth = bi.getWidth();
            int srcHeight = bi.getHeight();
            String imageId = f.getName();
            String imageUrl = f.getAbsolutePath();
                        
            model.addAttribute("imageId", imageId);
            model.addAttribute("imageUrl", imageUrl);
            model.addAttribute("width", srcWidth);
            model.addAttribute("height", srcHeight);
            model.addAttribute("status", 0);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			model.addAttribute("status", 1);
			model.addAttribute("errMSG", "上传图片发生异常!");
		}
		
		AjaxResponseUtil.returnData(res, JSONObject.toJSONString(model));
		return null;
	}
	/**
	 * 裁剪图片
	 */
	@RequestMapping("/video/cutimg")
	public String cutImg(HttpServletRequest req,HttpServletResponse res,ModelMap model){
		if(!isLogin(req)&&!isAdminLogin(req)){
			return "redirect:/login";
		}
		HttpRequestInfo reqInfo = new HttpRequestInfo(req);
		double scale = new Double(reqInfo.getParameter("scale")).doubleValue();
		int x1 = Integer.parseInt(reqInfo.getParameter("x1"));
		int y1 = Integer.parseInt(reqInfo.getParameter("y1"));
		int x2 = Integer.parseInt(reqInfo.getParameter("x2"));
		int y2 = Integer.parseInt(reqInfo.getParameter("y2"));
		String srcImgId = reqInfo.getParameter("srcImageId");
		logger.info("srcImgId="+srcImgId);
		int w = x2-x1;
		int h = y2-y1;
		//缩放后，选中区域高宽和起始点
		w = (int)Math.round(w/scale);
		h = (int)Math.round(h/scale);
		int x = (int)Math.round(x1/scale);
		int y = (int)Math.round(y1/scale);
		FileConfig fileConfig = ConfigManager.getInstance().getFileConfig(configService);
		String url = fileConfig.IMG_LOCAL_DIR+"img/"+srcImgId;
		File f = new File(url);
		if(f.exists()){
			try {
				BufferedImage srcImage = ImageIO.read(f);
				String imageType = FileUtil.getImageType(f);
				byte[] cropContent = FileUtil.cropImage(srcImage, x, y, w, h, imageType,fileConfig);
				String cutName = "_1"+srcImgId;
				FileUtil.bytes2File(cropContent, cutName,fileConfig);
				model.addAttribute("cutImgId", cutName);
				model.addAttribute("status", 0);
			} catch (Exception e) {
				logger.error(e.getMessage(),e);
			}
		}
		
		AjaxResponseUtil.returnData(res, JSONObject.toJSONString(model));
		return null;
	}
	@RequestMapping("/video/upimg")
	public String uploadImg(HttpServletRequest req,HttpServletResponse res,ModelMap model){
		if(!isLogin(req)){
			return "redirect:/login";
		}
		AjaxResponseUtil.returnData(res, JSONObject.toJSONString("{}"));
		return null;
	}
	@RequestMapping("/video/remove")
	public String removeVideo(HttpServletRequest req,HttpServletResponse res,ModelMap model) throws AzureMediaSDKException{
		if(!isLogin(req)){
			return "redirect:/login";
		}
		HttpRequestInfo reqInfo = new HttpRequestInfo(req);
		 String upload_asset_id = reqInfo.getParameter("upload_asset_id");
		 String encode_asset_id = reqInfo.getParameter("encode_asset_id");
		 if(FileUtilAzure.delVideo(upload_asset_id,encode_asset_id)){
			 model.addAttribute("success", true);
			 AjaxResponseUtil.returnData(res, JSONObject.toJSONString(model));
		 }else{
			 model.addAttribute("success", false);
			 AjaxResponseUtil.returnData(res, JSONObject.toJSONString(model));
		 }
		return null;
	}
	
	
	public static void main(String[] args) {
		String url = "E:\\eclipse\\tmpfile\\video.mp4";
		new File(url).deleteOnExit();
	}
	private static final String STATIC_MOD_SINCE="Fri, 02 Sep 2011 16:00:38 GMT";
	@RequestMapping("/video/downimg")
	public String downImg(HttpServletRequest req,HttpServletResponse rsp,ModelMap model){
		HttpRequestInfo reqInfo = new HttpRequestInfo(req);
		String url = reqInfo.getParameter("img_url");
		FileConfig fileConfig = ConfigManager.getInstance().getFileConfig(configService);
		url = fileConfig.IMG_LOCAL_DIR+"img/"+url;
		byte[] buffer = null;
		if(url!=null){
			File target = new File(url);
			try {
				FileInputStream fis = new FileInputStream(target);
				ByteArrayOutputStream bos = new ByteArrayOutputStream(1000);
				byte[] b = new byte[1000];
				int n;
				while((n = fis.read(b))!=-1){
					bos.write(b,0,n);
				}
				bos.close();
				fis.close();
				buffer = bos.toByteArray();
			} catch (IOException e) {
				logger.error(e.getMessage(),e);
			}
		}
		if(buffer!=null){
			rsp.setHeader("Content-Type", "image/jpg");
			rsp.setHeader("Cache-Control","max-age=604800,public");
			rsp.setHeader("Last-Modified",STATIC_MOD_SINCE);
			rsp.setContentLength(buffer.length);
			try {  
				rsp.getOutputStream().write(buffer);
				if(rsp.getOutputStream()!=null){
					rsp.getOutputStream().close();
				}
			} catch (IOException e) {
				logger.error(e.getMessage(),e);
			}
		}
		return null;
	}
	
	
	
	@RequestMapping(value ="/video/clickvideo" ,method = RequestMethod.POST)
	public void clickVideo(HttpServletRequest req,HttpServletResponse res,ModelMap model){
		String id = req.getParameter("id");
		Integer idInt = Integer.valueOf(id);
		videoService.addVideoCNum(idInt);
		
		packageStatService.addFlowNum(idInt, false);
		
	}
	
	
	@RequestMapping(value ="/video/h5clickvideo", method = RequestMethod.POST)
	public void h5ClickVideo(HttpServletRequest req,HttpServletResponse res,ModelMap model){
		String id = req.getParameter("id");
		Integer idInt = Integer.valueOf(id);
		videoService.addH5VideoCNum(idInt);
		packageStatService.addFlowNum(idInt, true);
	}
	
}
