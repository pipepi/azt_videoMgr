/**
 * 
 */
package com.aepan.sysmgr.service.implement;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com._21cn.framework.util.PageList;
import com.aepan.sysmgr.dao.PackageDao;
import com.aepan.sysmgr.dao.PackageStatDao;
import com.aepan.sysmgr.dao.UserDao;
import com.aepan.sysmgr.dao.VideoDao;
import com.aepan.sysmgr.model.StoreVideo;
import com.aepan.sysmgr.model.Video;
import com.aepan.sysmgr.model.VideoCheck;
import com.aepan.sysmgr.model.packageinfo.PackageInfo;
import com.aepan.sysmgr.model.tempinfo.LinkVideoInfo;
import com.aepan.sysmgr.service.VideoService;

/**
 * @author Administrator
 * 2015年8月3日下午2:54:36
 */
@Service
public class VideoServiceImpl implements VideoService {
	@Autowired
	private VideoDao videoDao;
	@Autowired
	private UserDao userDao;
	@Autowired
	private PackageStatDao packageStatDao;
	@Autowired
	private PackageDao packageDao;
	@Override
	public int insert(Video v) throws Exception {
		int id = videoDao.addVideoWithGenKey(v.harmSensitiveWord());
		//更改套餐拥有数量
		/*PackageStat packageStat = packageStatDao.getByUserId(v.userId);
		packageStat.setVideoNum((packageStat.getVideoNum()+1));
		packageStatDao.update(packageStat);*/
		return id;
	}
	
	@Override
	public Video get(int id) {
		return videoDao.findVideoById(id);
	}
	@Override
	public void delete(int id,int userId) {
		videoDao.delete(id);
		//更新拥有视频数量
		/*PackageStat packageStat = packageStatDao.getByUserId(userId);
		packageStat.setVideoNum((packageStat.getVideoNum()-1));
		packageStatDao.update(packageStat);*/
		//删除关联关系
		videoDao.deleteLinkRelationByVideoId(userId, id);
	}
	
	@Override
	public void update(Video v) {
		videoDao.updateVideo(v.harmSensitiveWord());
	}

	@Override
	public PageList<Video> getList(Map<String, Object> params, int pageNo,
			int pageSize) {
		return videoDao.pageList(params, pageNo, pageSize);
	}
	@Override
	public PageList<Video> getListWithPatnerAccountName(Map<String, Object> params, int pageNo,
			int pageSize) {
		PageList<Video> list =  videoDao.pageList(params, pageNo, pageSize);
		Video.setParterAccountName(list, userDao);
		return list;
	}
	
	@Override
	public void batchInsert(int batchSize, List<StoreVideo> batchList,
			Integer userId) {
		videoDao.batchInsert(batchSize, batchList, userId);
		
	}

	@Override
	public boolean deleteByUserIdANDStoreId(int userId, int storeId) {
		return videoDao.deleteByUserIdANDStoreId(userId, storeId);
	}
	
	@Override
	public List<Video> getListByStoreId(int storeId, int userId){
		return videoDao.getListByStoreId(storeId, userId);
	}
	
	@Override
	public boolean active(int videoId, boolean state) {
		Video v = videoDao.findVideoById(videoId);
		v.active = state;
		videoDao.updateVideo(v);
		return true;
	}

	@Override
	public boolean check(int videoId, int state, String msg) {
		Video v = videoDao.findVideoById(videoId);
		v.checkState = state;
		if(v.checkState != VideoCheck.state_上线){
			int num = v.checkMsgs==null?0:v.checkMsgs.size();
			num++;
			VideoCheck vc = new VideoCheck(num, state, msg);
			if(v.checkMsgs!=null){
				v.checkMsgs.add(vc);
			}else{
				List<VideoCheck> vcList = new ArrayList<VideoCheck>();
				vcList.add(vc);
				v.checkMsgs = vcList;
			}			
		}
		videoDao.updateVideo(v);
		return true;
	}
	/**校验在套餐中是否有足够的数量来关联当前选中的视频*/
	@Override
	public LinkVideoInfo canLink(int userId,int packgeId,int storeId,List<StoreVideo> batchList){
		LinkVideoInfo lvi = new LinkVideoInfo();
		PackageInfo p = packageDao.getById(packgeId);
		
		if(p.getVideoNum()<batchList.size()){
			lvi.onceStoreVideoNum=batchList.size();
			lvi.onceStoreCanLinkVideoNum=p.getVideoNum();
			return lvi;
			
		}
		
		//记录用户完成本次关联后的已关联视频数量linkedVideoNum     套餐中拥有的数量canlinkVideoNum
		List<StoreVideo> linkedList  = videoDao.getStoreVideoListByUserId(userId);
		List<StoreVideo> exceptCurrList = new ArrayList<StoreVideo>();
		if(linkedList!=null&&!linkedList.isEmpty()){
			for (StoreVideo storeVideo : linkedList) {
				//获得除去当前要关联播放器相关StoreVideo后的List<StoreVideo>
				if(storeVideo.storeId != storeId){
					exceptCurrList.add(storeVideo);
				}
			}
		}
		//完成本次关联后的List<StoreVideo>
		exceptCurrList.addAll(batchList);

		int linkedVideoNum = exceptCurrList.size();
		//PackageStat pstate = packageStatDao.getByUserId(userId);
		int canlinkVideoNum = p==null?0:p.getVideoNum()*p.getPlayerNum();
		lvi.linkedVideoNum = linkedVideoNum;
		lvi.canlinkVideoNum = canlinkVideoNum;
		if(linkedVideoNum>canlinkVideoNum){
			lvi.can = false;
		}else{
			lvi.can = true;
		}
		return lvi;
	}
	
	@Override
	public int getStoreVideoCountByUserId(int userId){
		return videoDao.getStoreVideoCountByUserId(userId);
	}
	
	@Override
	public int getVideoCountByUserId(int userId){
		return videoDao.getVideoCountByUserId(userId);
		
	}
	
	@Override
	public  void addVideoCNum(int id){
		videoDao.addVideoCNum(id);
	}
	
	@Override
	public  void addH5VideoCNum(int id){
		videoDao.addH5VideoCNum(id);
	}
	
	@Override
	public float getUsedFlowNumByUserId(int userId){
		return videoDao.getUsedFlowNumByUserId(userId);
	}

	
	
}
