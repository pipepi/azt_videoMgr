package com.aepan.sysmgr.common.cache;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.locks.ReentrantLock;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.aepan.sysmgr.azure.MediaServiceSDK;
import com.aepan.sysmgr.azure.StorageServiceSDK;


/**
 * @Desc   加载参数信息到缓存
 * @author laihh
 * @date   2014-01-13
 * @version: 
 */
public class ParamInfoCache {
	
	
	private static final Logger logger = LoggerFactory.getLogger(ParamInfoCache.class);

	
	private static Map<String, Object> mapParamInfoCache = new ConcurrentHashMap<String, Object>(); 
	
	
	public  static Map<Integer,ReentrantLock> controllerLockMap = new ConcurrentHashMap<Integer, ReentrantLock>();
	
	public static final int LOCK_SAVE_PLAYER=1;
	
	public void initMapParamInfo() {
		logger.info("ParamInfoCache loading : initMapCache"  );	
		
		initAzureSDK();
		
		
		controllerLockMap.put(LOCK_SAVE_PLAYER, new ReentrantLock());
		
//        loadParamInfo(); 
        ExecutorService service = Executors.newCachedThreadPool();
        LoadTask task = new LoadTask();
        service.execute(task);
	}

	private void initAzureSDK() {
		
		logger.info("ParamInfoCache loading : initAzureSDK"  );	
		
		try {
			MediaServiceSDK.init("video9cooo", "Gs5S6xkFnLhFsIKV0X/lRgyfOUc5A6qPDAiFd0I9wK8=");
			StorageServiceSDK.init("pic9cooo",
	 				"xEz4/e6bwkzNxTiga+mv1AVXwikZEsD56lYCm216z7+KaCvtxmqV7PMc51G9oRaXnBa4uFh/tv6Sqi8XVtZ43A==");
		} catch (Exception e) {
			//ignore
			logger.warn("init failed."+e.getMessage(),e);
		}
	}
	
    /**
     * 启动一个线程载入数据
     * @author acer
     *
     */
    private class LoadTask implements Runnable {
        
        @Override
        public void run() {  
            while (true) {
                try {     
//                    loadParamInfo();                                                      
                    Thread.sleep(60*60*1000);                    
                    
                    initAzureSDK();
                    
                } catch (InterruptedException e) {
                	logger.error("init InterruptedException."+e.getMessage(),e);
                } catch (Exception e) {
                	logger.error("init Exception."+e.getMessage(),e);
                }                
            }                    
        }
    }
	
	/*private Map<String,Object> loadParamInfo(){ 
		Map<String,Object> map = new HashMap<String, Object>();
		try{
			
			Properties props = ConfigUtil.getInstance().getProps();		
			if(props != null && props.size() > 0 ){
			    
			    mapParamInfoCache.clear();
				Set<?> keyValue = props.keySet();              
				for (Iterator<?> it = keyValue.iterator(); it.hasNext();) {
					String key = (String)it.next();
					map.put(key, props.getProperty(key));	
				}
				mapParamInfoCache.putAll(map);
				logger.info(" ParamInfoCache initMapCache() Sync [paramInfoNum = " + mapParamInfoCache.size() +" ] data to paramInfoCache.");
				return map;
			}else{
				logger.info("ParamInfoCache loadParamInfo() Not ParamInfo data could be sync to mapParamInfoCache.");
				return Collections.emptyMap();
			}
		}catch(Exception e){
			logger.error(" ParamInfoCache loadParamInfo() Exception " + e.getMessage(),e);
			return null;
		}
	}
	*/
	/**
	 * 获取参数值
	 * @param key
	 * @return
	 */
	public static String get(String key){
		if(mapParamInfoCache.containsKey(key)){
			return (String)mapParamInfoCache.get(key);
		}
		return null;  
	}
	
	/**
	 * 获取参数值
	 * @param key 
	 * @param defaultVal 默认值
	 * @return
	 */
	public static String get(String key,String defaultVal){
		try{
			if(mapParamInfoCache.containsKey(key)){
				return (String)mapParamInfoCache.get(key);
			}
		}catch(Exception e){
			logger.error(e.getMessage(),e);
		}
		return defaultVal;  
	}
	
	/**
	 * 获取参数值
	 * @param key 
	 * @param defaultVal 默认值
	 * @return
	 */
	public static long getLong(String key,long defaultVal){
		try{
			if(mapParamInfoCache.containsKey(key)){
				return new Long((String)mapParamInfoCache.get(key));
			}
		}catch(Exception e){
			logger.info(e.getMessage(),e);
		}
		return defaultVal;  
	}
	
	/**
	 * 获取参数值
	 * @param key 
	 * @param defaultVal 默认值
	 * @return
	 */
	public static long getInteger(String key,Integer defaultVal){
		try{
			if(mapParamInfoCache.containsKey(key)){
				return new Integer((String)mapParamInfoCache.get(key));
			}
		}catch(Exception e){
			logger.error(e.getMessage(),e);
		}
		return defaultVal;  
	}
	

	/**
	 * 获取缓存大小
	 * @return
	 */
	public static int size(){
		return mapParamInfoCache.size();
	}
	
	
}
